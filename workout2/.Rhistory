total <- transportation + groceries + gym + rent + other + phone
total <- phone + transportation + groceries + gym + rent + other
semester <-  5*total
year <- 2*semester
semester
year
semester <-  5*total
year <- 10*total
semester
year
semester <-  5*total
year <- 2*semester
# absolute value
abs(10)
abs(-4)
# square root
sqrt(9)
# natural logarithm
log(2)
barplot(expenses)
expenses <- c(phone, transportation, groceries, gym, rent, other)
barplot(expenses)
!sort
!! sort
?? sort
? sort
barplot(sort(expenses))
barplot(sort(expenses, decreasing = true))
barplot(sort(expenses, decreasing = true))
barplot(sort(expenses, decreasing = TRUE))
barplot(sort(expenses, decreasing = TRUE, names(expenses)))
barplot(sort(expenses, decreasing = TRUE, names(expenses)))
barplot(sort(expenses, decreasing = TRUE, name.arg = expression(rent, groceries, others, phone, TP, gym)))
barplot(sort(expenses, decreasing = TRUE, name.arg = expression(rent, groceries, others, phone, TP, gym)))
barplot(sort(expenses, decreasing = TRUE, name.arg = expression (rent, groceries, others, phone, TP, gym)))
barplot(sort(expenses, decreasing = TRUE, name.arg = expression (rent, groceries, others, phone, TP, gym))
?? sort
barplot(sort(expenses, decreasing = TRUE, name.arg = expression (rent, groceries, others, phone, TP, gym))
barplot(sort(expenses, decreasing = TRUE), names.arg = expression (rent, groceries, others, phone, TP, gym))
barplot(sort(expenses, decreasing = TRUE), name.arg = expression (rent, groceries, others, phone, TP, gym))
barplot(sort(expenses, decreasing = TRUE), name.arg = expression (rent, groceries, others, phone, TP, gym))
barplot(sort(expenses, decreasing = TRUE), names.arg = expression (rent, groceries, others, phone, TP, gym))
barplot(sort(expenses, decreasing = TRUE), names.arg = expression (rent, groceries, others, phone, TP, gym))
?Arithmetic
a <- 3
b <- 4
?Arithmetic
c <- sqrt(a^2 + b^2)
c
factorial(4)
choose(n = 5, k = 2)
```{r}
n <- 5
k <- 2
p <- 1/2
factorial(n)/factorial(k)
factorial(n)/(factorial(k)*factorial(n-k))
choose(n,k)
choose(n,k)
factorial(n)/factorial(n-k)*factorial(k)
factorial(n)/factorial(n-k)*factorial(k)
factorial(n)/(factorial(n-k)*factorial(k))
factorial(n)/(factorial(k)*factorial(n-k))
factorial(n)/(factorial(k)*factorial(n-k))*p^2*(1-p)^3
factorial(n)/(factorial(k)*factorial(n-k))*p^2*(1-p)^3
choose(n,k)*p^2*q^3
choose(n,k)*p^2*(1-p)^3
choose(10,3)*(1/6)^3*(1-(1/6))^7
#for rolling 10 times
choose(n= 10, k = 3)*(1/6)^3*(5/6)^7
?? binomial
dbinom(2, 5, 1/2 )
dbinom(3 ,3 1/6)
dbinom(3 ,3, 1/6)
dbinom(3, 3, 1/6, log=FALSE)
dbinom(5,2,0.35)
dbinom(2,5,0.35)
0.35
p <- 0.35
n <- 5
k <- 2
factorial(n)/(factorial(k)*factorial(n-k))*p^2*(1-p)^3
factorial(n)/(factorial(k)*factorial(n-k))*p^2*(1-p)^3
dbinom(2,5,0.35)
f <- dbinom(4,5,0.35)
f <- dbinom(4,5,0.35)
s <- dbinom(5,5,0.35)
f+s
f <- dbinom(4,5,0.35)
s <- dbinom(5,5,0.35)
f+s
f+s
f <- dbinom(4,5,0.35)
f
s
f <- dbinom(4,5,0.35, log = FALSE)
f
s <- dbinom(5,5,0.35)
s <- dbinom(5,5,0.35, log = FALSE)
s
f <- dbinom(4,5,0.35, log = FALSE)
f
s <- dbinom(5,5,0.35, log = FALSE)
s
f+s
install.packages("knitr")
install.packages(c("readr", "ggplot2"))
```{r}
library(knitr)
install.packages(c("readr", "ggplot2"))
install.packages(c("stringr", "RColorBrewer", "XML"))
x <- 2
3*x^2 + 4*x + 8
x_2 <- 2
x_2 <- -3:3
3*x^2 + 4*x + 8
x<- -3:3
3*x^2 + 4*x + 8
x_2 <- -3:3
3*x^2 + 4*x + 8
x_2 <- -3:3
3*x_2^2 + 4*x + 8
x <- 2
3*x^2 + 4*x + 8
##practice
f_1 <- 4:5
dbinom(f_1,5, 0.35, log = FALSE)
help(Arithmetic)
setwd("~/Desktop/Stat133/Lab 01")
setwd("~/Desktop/Stat133/Lab 01")
library(dplyr)
dat <- read.csv("../data/nba2018.csv", stringsAsFactors = FALSE)
setwd("~/Desktop/hw-stat133/workout1/report")
dat <- read.csv("../data/nba2018.csv", stringsAsFactors = FALSE)
dat$experience[dat$experience == "R"] <- "0"
dat$experience <- as.integer(dat$experience)
View(dat)
library(dplyr)
dat <- read.csv("../data/nba2018.csv", stringsAsFactors = FALSE)
dat$experience[dat$experience == "R"] <- "0"
dat$experience <- as.integer(dat$experience)
str(dat)
#Transform salary so that you have salaries in millions: e.g. 1000000 should be converted to 1.
dat$salary <- dat$salary/1000000
dat$position <- factor(dat$position, levels = c('C', 'PF','PG', 'SF', 'SG'), labels = c('center', 'power_fwd', 'point_guard', 'small_fwd', 'shoot_guard'))
#Adding new variables
dat <- mutate(dat,
missed_fg = field_goals_atts - field_goals,
missed_ft = points1_atts - points1,
rebounds = off_rebounds + def_rebounds,
efficiency = (points + rebounds + assists + steals + blocks - missed_fg - missed_ft - turnovers) / games)
#sink txt file in output
sink(file = '../output/efficiency-summary.txt')
summary(dat$efficiency)
dat_team <- summarise(
group_by(dat, team),
experience = round(sum(experience), 2),
salary = round(sum(salary), 2),
points3 = sum(points3),
points2 = sum(points2),
points1 = sum(points1),
points = sum(points),
off_rebounds = sum(off_rebounds),
def_rebounds = sum(def_rebounds),
assists = sum(assists),
steals = sum(steals),
blocks = sum(blocks),
turnovers = sum(turnovers),
fouls = sum(fouls),
efficiency = sum(efficiency)
)
sink(file = '../output/teams-summary.txt')
summary(dat_team$efficiency)
#create new csv file in data
write.csv(dat_team, "../data/nba2018-teams.csv", row.names = FALSE)
teams <- read.csv("../data/nba2018-teams.csv")
ggplot(teams, aes(x=reorder(team, salary), y=salary)) + geom_bar(stat='identity') + coord_flip() + labs(y = "Salary(in millions)", x = "Team", title = "NBA Teams ranked by Total Salary") + geom_hline(aes(yintercept = mean(salary)), colour = "red", size = 1.5)
ggplot(teams, aes(x=reorder(team, efficiency), y=efficiency)) + geom_bar(stat='identity') + coord_flip() + labs(y = "Total Efficiency", x="Team", title = "NBA Teams ranked by Total Efficiency") + geom_hline(aes(yintercept =  mean(efficiency)), colour = "red", size = 1.5)
library(ggplot2)
library(dplyr)
teams <- read.csv("../data/nba2018-teams.csv")
ggplot(teams, aes(x=reorder(team, salary), y=salary)) + geom_bar(stat='identity') + coord_flip() + labs(y = "Salary(in millions)", x = "Team", title = "NBA Teams ranked by Total Salary") + geom_hline(aes(yintercept = mean(salary)), colour = "red", size = 1.5)
ggplot(teams, aes(x=reorder(team, points), y=points)) + geom_bar(stat='identity') + coord_flip() + labs(y = "Total Points", x="Team", title = "NBA Teams ranked by Total Points") + geom_hline(aes(yintercept =  mean(points)), colour = "red", size = 1.5)
ggplot(teams, aes(x=reorder(team, efficiency), y=efficiency)) + geom_bar(stat='identity') + coord_flip() + labs(y = "Total Efficiency", x="Team", title = "NBA Teams ranked by Total Efficiency") + geom_hline(aes(yintercept =  mean(efficiency)), colour = "red", size = 1.5)
ggplot(teams, aes(x=reorder(team, experience), y=experience)) + geom_bar(stat='identity') + coord_flip() + labs(y = "Total Experience", x="Team", title = "NBA Teams ranked by Total Experience") + geom_hline(aes(yintercept =  mean(experience)), colour = "red", size = 1.5)
knitr::opts_chunk$set(echo = TRUE)
x <- c(1,2,3,4,5)
x+1
x <- x+1
x
x
y <- c(x, 10)
str(y)
is.factor(y)
c(2,1)+c(1,2,3)
c(2,1,3)+c(1,2,3)
c(2,1,3)+c(1,2,3)
a <- c(2,1,3)+c(1,2,3)
a
Y <- c(x,10)
x: where x <- c(TRUE, FALSE)
x <- c(TRUE, FALSE)
y <- c(x,10)
x <- c(TRUE, FALSE,FALSE, TRUE)
y <- c(x,10)
x <- c(2,4,6,8)
names(x) <- letters[1:4]
x <- c(2,4,6,8)
names(x) <- letters[1:4]
x[1]
x[1]
x[1]
x[c(1,3)]
a <- x[c(1,3)]
b <- x[c(3,2,4,1)]
c <- x["a"]
x <- c(1,2,3,4,5)
y <- c("one","two","three")
z <- c(TRUE,FALSE,TRUE)
x <- c(1,2,3,4,5)
y <- c("one","two","three")
z <- c(TRUE,FALSE,TRUE)
x <- c(1,2,3,"four","five")
t <- c(TRUE,FALSE,3,4)
y <- c(TRUE,FALSE,3,4)
z <- c(TRUE, 1L, 2 +3i, pi)
as.character(x)
as.character(y)
as.character(y)
as.character()
?as.character
x <- c(2,4,6,8)
names(x) <- letters[1:4]
x[1]
a <- x[1]
a <- x[2]
a
length(a)
v <- length(a)
x[length(x)]
x <- c(2,4,6,8)
x[length(x)]
a <- x[length(x)]
names(x) <- letters[1:4]
a <- x[length(x)]
x[c(3,2,4,1)]
x <- c(2,4,6,8)
x[c(TRUE, FALSE, FALSE, FALSE)]
x[c(3,2,4,1)]
x[c(TRUE, FALSE, FALSE, FALSE)]
x <- c(2,4,6,8)
names(x) <- letters[1:4]
z <- x[c(c,d)]
z <- x[c("c","d")]
z <- x[c("c","d","d")]
typeof(x)
a <- typeof(x)
x[as.logical((c(0,1,pi,-10)))]
b <- x[as.logical((c(0,1,pi,-10)))]
b <- x[as.character((c(0,1,pi,-10)))]
b <- x[as.double((c(0,1,pi,-10)))]
b <- x[as.factor((c(0,1,pi,-10)))]
c(1,2,3)^c(3,2,1)
t <- c(1,2,3)^c(3,2,1)
t <- c(1,2,3)* c(3,2,1)
length(letters)
a <- length(letters)
x <- c(2,4,6,8,"four")
x <- c(2,4,6,8)
names(x) <- letters[1:4]
x[rep("a",5)]
d <- x[rep("a",5)]
d <- x[rep("b",5)]
d <- x[rep("b",a)]
d <- x[rep("b",c)]
d <- x[rep("b",c)]
a <- length(letter)
a <- length(letters)
d <- x[rep("b","c")]
x <- 1:8
dim(x) <- c(2,4)
dim(x) <- c(3,4)
dim(x) <- c(4,4)
dim(x) <- c(1,4)
dim(x) <- c(2,4)
dim(x) <- c(2,4)
x
View(x)
x <- 1:16
dim(x) <- c(2,8)
x <- 1:16
dim(x) <- c(4,4)
View(x)
dim(x) <- c(2,8)
View(x)
x <- 1:8
dim(x) <- c(2,2,2)
dim(x) <- c(2,2,2)
dim(x) <- c(2,4)
View(x)
dim(x) <- c(2,2,2)
a <- 1:8
A <- matrix(a,nrow=2,ncol = 4)
View(A)
B <- matrix(a, nrow=2,ncol=4,byrow=TRUE)
View(B)
View(A)
View(A)
B[2,3]
c <- B[2,3]
View(A)
dim(x) <- c(2,2,2)
dim(x)[2,2,2]
dim(x)[2,2]
rm(ls())
rm[(ls()]
rm[ls()]
rm[list=ls()]
rm(list=ls())
?rm
size <- c("sm","md","lg","md")
size <- factor(size)
size <- c("sm","md","lg","md",3)
size <- factor(size)
size
length(size)
length(size)
a <- length(size)
seq(2,a)
g <- seq(2,a)
rm(list=ls())
size <- c("sm","md","lg","md")
size <- factor(size)
size <- c("sm","md","lg","mdd")
size <- factor(size)
a <- length(size)
g <- seq(2,a)
size <- c("sm","md","lg","md")
size <- factor(size)
a <- length(size)
size <- c("sm","md","lg","md")
size <- factor(size)
a <- length(size)
g <- seq(2,a)
size <- c("sm","md","lg","md")
size <- factor(size)
a <- length(size)
b <- length(size)
rm(list=ls())
1st <- list(
1st <- list(
lst <- list(
c(1,2,3),
matrix(1:9, nrow =3, ncol = 3),
list(1:2, c(TRUE,FALSE), c("a","b"))
)
View(lst)
asd <- list(c(1,2,3))
asd <- list(c(1,2,3),
matrix(1:9,nrow = 3,ncol = 3))
asd <- list(list(c(1,2,3))
matrix(1:9,nrow = 3,ncol = 3))
asd <- list(list(c(1,2,3)))
asd <- list(list(c(1,2,3,4)))
View(asd)
list[elem]
list[5]
list[lst]
rm(list=ls())
lst <- list(
c(1,2,3),
matrix(1:9, nrow =3, ncol = 3),
list(1:2, c(TRUE,FALSE), c("a","b"))
)
lst[1]
lst[1]
a <- lst[1]
View(a)
lst[1]
lst <- list(
c(1,2,3),
matrix(1:9, nrow =3, ncol = 3),
list(1:2, c(TRUE,FALSE), c("a","b"))
)
lst[2]
lst[[1]]
lst[[2]]
lst[2]
lst[[2]]
lst[1]
lst[2]
lst[3]
lst[[1]]
lst[[2]]
lst[1]
lst[1]
lst[1]
rm(list=ls())
lst <- list(
c(1,2,3),
matrix(1:9, nrow =3, ncol = 3),
list(1:2, c(TRUE,FALSE), c("a","b"))
)
lst[1]
lst[[1]]
a <- lst[[1]]
a <- lst[1]
View(a)
b <- lst[2]
View(b)
lst <- list(
c(1,2,3),
matrix(1:9, nrow =3, ncol = 3),
list(1:2, c(TRUE,FALSE), c("a","b"))
)
lst$lis[[1]]
alst$lis[[1]]
a <- lst$lis[[1]]
lst <- list(
c(1,2,3),
matrix(1:9, nrow =3, ncol = 3),
list(1:2, c(TRUE,FALSE), c("a","b"))
)
a <- lst$lis[[1]]
a <- lst$lis[[2]]
a <- lst$lis[1]
a <- lst$lis[4]
a <- lst$list[[2]]
a <- lst$list[[1]]
rm(list=ls())
df <- data.frame(
name= c('Anakin','Padme','Luke','Leia'),
gender = c('male', 'female', 'male', 'female'),
height = c(1.88, 1.65, 1.72, 1.50),
weight = c(84,45,77,49)
)
View(df)
df[1]
df[[1]]
a <- df[[1]]
a <- df[[1,1]]
a <- df[[]]
rm(list=ls())
df <- data.frame(
name= c('Anakin','Padme','Luke','Leia'),
gender = c('male', 'female', 'male', 'female'),
height = c(1.88, 1.65, 1.72, 1.50),
weight = c(84,45,77,49)
)
df$name
a <- df$name
df <- data.frame(
name= c("Anakin",'Padme','Luke','Leia'),
gender = c('male', 'female', 'male', 'female'),
height = c(1.88, 1.65, 1.72, 1.50),
weight = c(84,45,77,49)
)
a <- df$name
df <- data.frame(
name= c('Anakin','Padme','Luke','Leia'),
gender = c('male', 'female', 'male', 'female'),
height = c(1.88, 1.65, 1.72, 1.50),
weight = c(84,45,77,49)
)
a <- df$name
a <- df[name]
a <- df[df$name]
View(df)
View(a)
View(df)
a <- df$name[df$name=='Anakin']
a <- df$name[df$name=='Anakin'] = '0'
a <- df$name[df$name =='Anakin'] <-  '0'
df$name[df$name =='Anakin'] <-  '0'
df <- data.frame(
name= c('Anakin','Padme','Luke','Leia'),
gender = c('male', 'female', 'male', 'female'),
height = c(1.88, 1.65, 1.72, 1.50),
weight = c(84,45,77,49)
)
df$name[df$name =='Anakin'] <-  '0'
as.factor(name)
as.integer(name)
as.character(name)
str(airquality)
a <- str(airquality)
head(airquality, n=5)
names(airquality)
names(airquality)
class(airquality)
is.data.frame(airquality)
airquality
airquality[airquality$Ozone > 41]
airquality[airquality$Ozone > 41,]
airquality[airquality$Ozone > 41,airquality$Solar.R <200]
airquality[airquality$Ozone > 41,airquality$Solar.R >200]
x <- 6
x>5
a <- x>5
x <- letters[1:10]
x[1:5]
head(x, 5)
b <- x[1:5]
c <- head(x, 5)
y <- matrix(1:12, nrow = 4, ncol = 3, byrow = TRUE)
View(y)
is.na(age)
# AND
TRUE & TRUE
# AND
TRUE & TRUE
setwd("~/Desktop/hw-stat133/workout2")
