effective_field_goal_perc = col_double(),
number = col_integer(),
weight = col_integer(),
rank = col_integer(),
age = col_integer(),
games = col_integer(),
games_started = col_integer(),
minutes = col_integer(),
field_goals = col_integer(),
field_goals_atts = col_integer(),
points3 = col_integer(),
points3_atts = col_integer(),
points2 = col_integer(),
points2_atts = col_integer(),
points1 = col_integer(),
points1_atts = col_integer(),
off_rebounds = col_integer(),
def_rebounds = col_integer(),
total_rebounds = col_integer(),
assists = col_integer(),
steals = col_integer(),
blocks = col_integer(),
turnovers = col_integer(),
fouls = col_integer(),
points = col_integer()
)
)
library("readr")
nba = read_csv("nba2018.csv", col_types =
cols(
player = col_character(),
team = col_character(),
height = col_character(),
birth_date = col_character(),
country = col_character(),
experience = col_character(),
college = col_character(),
position = col_factor(c('C', 'PF', 'PG', 'SF', 'SG')),
salary = col_double(),
field_goals_perc = col_double(),
points3_perc = col_double(),
points2_perc = col_double(),
points1_perc = col_double(),
effective_field_goal_perc = col_double(),
number = col_integer(),
weight = col_integer(),
rank = col_integer(),
age = col_integer(),
games = col_integer(),
games_started = col_integer(),
minutes = col_integer(),
field_goals = col_integer(),
field_goals_atts = col_integer(),
points3 = col_integer(),
points3_atts = col_integer(),
points2 = col_integer(),
points2_atts = col_integer(),
points1 = col_integer(),
points1_atts = col_integer(),
off_rebounds = col_integer(),
def_rebounds = col_integer(),
total_rebounds = col_integer(),
assists = col_integer(),
steals = col_integer(),
blocks = col_integer(),
turnovers = col_integer(),
fouls = col_integer(),
points = col_integer()
)
)
str(nba)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
# origin <- 'http://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data'
# destination <- 'abalone.data'
# download.file(origin, destination)
abalone <- read.table("abalone.data", sep = ",")
# csv <-  https://raw.githubusercontent.com/ucb-stat133/stat133-fall-2018/master/data/nba2018.csv
# download.file(url = csv, destfile = 'nba2018.csv')
#import the data in R
dat <- read.csv('nba2018.csv', stringsAsFactors = FALSE)
str(nba)
aggregate(dat[ ,c('player', 'team', 'height', 'birth_date', 'country', 'experiance', 'college')], by = list(dat$character), FUN = mean)
# csv <-  https://raw.githubusercontent.com/ucb-stat133/stat133-fall-2018/master/data/nba2018.csv
# download.file(url = csv, destfile = 'nba2018.csv')
#import the data in R
dat <- read.csv('nba2018.csv', stringsAsFactors = FALSE)
str(nba)
aggregate(dat[ ,c('player', 'team', 'height', 'birth_date', 'country', 'experiance', 'college')], by = list(dat$character), FUN = mean)
# csv <-  https://raw.githubusercontent.com/ucb-stat133/stat133-fall-2018/master/data/nba2018.csv
# download.file(url = csv, destfile = 'nba2018.csv')
#import the data in R
dat <- read.csv('nba2018.csv', stringsAsFactors = FALSE)
str(dat)
nba = read_csv("nba2018.csv", col_types =
cols(
player = col_character(),
team = col_character(),
height = col_character(),
birth_date = col_character(),
country = col_character(),
experience = col_character(),
college = col_character(),
position = col_factor(c('C', 'PF', 'PG', 'SF', 'SG')),
salary = col_double(),
field_goals_perc = col_double(),
points3_perc = col_double(),
points2_perc = col_double(),
points1_perc = col_double(),
effective_field_goal_perc = col_double(),
number = col_integer(),
weight = col_integer(),
rank = col_integer(),
age = col_integer(),
games = col_integer(),
games_started = col_integer(),
minutes = col_integer(),
field_goals = col_integer(),
field_goals_atts = col_integer(),
points3 = col_integer(),
points3_atts = col_integer(),
points2 = col_integer(),
points2_atts = col_integer(),
points1 = col_integer(),
points1_atts = col_integer(),
off_rebounds = col_integer(),
def_rebounds = col_integer(),
total_rebounds = col_integer(),
assists = col_integer(),
steals = col_integer(),
blocks = col_integer(),
turnovers = col_integer(),
fouls = col_integer(),
points = col_integer()
)
)
str(nba)
#How many players went to UCLA (“University of California, Los Angeles”)?
sum(dat$college == "University of California, Los Angeles")
#How many players went to Cal (“University of California, Berkeley”)?
sum(dat$college == "University of California, Berkeley")
#What’s the largest weight value?
max(nba$weight)
#Who are the players with the largest weight value?
nba$player[which.max(dat$weight)]
#What’s the overall average weight?
mean(nba$weight)
#What is the median salary of all players?
median(nba$salary)
#What is the median salary of the players with 10 years of experience or more?
median(nba$salary[nba$experience >= 10])
#What is the median salary of Shooting Guards (SG) and Point Guards (PG)?
median(nba$salary[nba$position == 'SG' | nba$position == 'PG'])
#What is the median salary of Power Forwards (PF), 30 years or older, weighing 240 pounds or more?
median(nba$salary[nba$position == 'PG' & nba$age >= 30 & nba$weight >= 240])
#Create a data frame gsw with the player name, position, height, weight, and age of Golden State Warriors (GSW). Display this data frame.
gsw <- dat[nba$team == "GSW", c('player', 'height', 'weight')]
dat %>% filter(team == "GSW") %>% select_("player", "height", "weight")
#How many players went to UCLA (“University of California, Los Angeles”)?
sum(dat$college == "University of California, Los Angeles")
#How many players went to Cal (“University of California, Berkeley”)?
sum(dat$college == "University of California, Berkeley")
#What’s the largest weight value?
max(nba$weight)
#Who are the players with the largest weight value?
nba$player[which.max(dat$weight)]
#What’s the overall average weight?
mean(nba$weight)
#What is the median salary of all players?
median(nba$salary)
#What is the median salary of the players with 10 years of experience or more?
median(nba$salary[nba$experience >= 10])
#What is the median salary of Shooting Guards (SG) and Point Guards (PG)?
median(nba$salary[nba$position == 'SG' | nba$position == 'PG'])
#What is the median salary of Power Forwards (PF), 30 years or older, weighing 240 pounds or more?
median(nba$salary[nba$position == 'PG' & nba$age >= 30 & nba$weight >= 240])
#Create a data frame gsw with the player name, position, height, weight, and age of Golden State Warriors (GSW). Display this data frame.
gsw <- nba[nba$team == "GSW", c('player', 'position', 'height', 'weight', 'age')]
nba %>% filter(team == "GSW") %>% select_("player", "position", "height", "weight", "age")
#How many players went to UCLA (“University of California, Los Angeles”)?
sum(dat$college == "University of California, Los Angeles")
#How many players went to Cal (“University of California, Berkeley”)?
sum(dat$college == "University of California, Berkeley")
#What’s the largest weight value?
max(nba$weight)
#Who are the players with the largest weight value?
nba$player[which.max(dat$weight)]
#What’s the overall average weight?
mean(nba$weight)
#What is the median salary of all players?
median(nba$salary)
#What is the median salary of the players with 10 years of experience or more?
median(nba$salary[nba$experience >= 10])
#What is the median salary of Shooting Guards (SG) and Point Guards (PG)?
median(nba$salary[nba$position == 'SG' | nba$position == 'PG'])
#What is the median salary of Power Forwards (PF), 30 years or older, weighing 240 pounds or more?
median(nba$salary[nba$position == 'PG' & nba$age >= 30 & nba$weight >= 240])
#Create a data frame gsw with the player name, position, height, weight, and age of Golden State Warriors (GSW). Display this data frame.
gsw <- nba[nba$team == "GSW", c('player', 'position', 'height', 'weight', 'age')]
data %>% filter(team == "GSW") %>% select_("player", "position", "height", "weight", "age")
#How many players went to UCLA (“University of California, Los Angeles”)?
sum(dat$college == "University of California, Los Angeles")
#How many players went to Cal (“University of California, Berkeley”)?
sum(dat$college == "University of California, Berkeley")
#What’s the largest weight value?
max(nba$weight)
#Who are the players with the largest weight value?
nba$player[which.max(dat$weight)]
#What’s the overall average weight?
mean(nba$weight)
#What is the median salary of all players?
median(nba$salary)
#What is the median salary of the players with 10 years of experience or more?
median(nba$salary[nba$experience >= 10])
#What is the median salary of Shooting Guards (SG) and Point Guards (PG)?
median(nba$salary[nba$position == 'SG' | nba$position == 'PG'])
#What is the median salary of Power Forwards (PF), 30 years or older, weighing 240 pounds or more?
median(nba$salary[nba$position == 'PG' & nba$age >= 30 & nba$weight >= 240])
#Create a data frame gsw with the player name, position, height, weight, and age of Golden State Warriors (GSW). Display this data frame.
gsw <- nba[nba$team == "GSW", c('player', 'position', 'height', 'weight', 'age')]
dat %>% filter(team == "GSW") %>% select_("player", "position", "height", "weight", "age")
#How many players went to UCLA (“University of California, Los Angeles”)?
sum(dat$college == "University of California, Los Angeles")
#How many players went to Cal (“University of California, Berkeley”)?
sum(dat$college == "University of California, Berkeley")
#What’s the largest weight value?
max(nba$weight)
#Who are the players with the largest weight value?
nba$player[which.max(dat$weight)]
#What’s the overall average weight?
mean(nba$weight)
#What is the median salary of all players?
median(nba$salary)
#What is the median salary of the players with 10 years of experience or more?
median(nba$salary[nba$experience >= 10])
#What is the median salary of Shooting Guards (SG) and Point Guards (PG)?
median(nba$salary[nba$position == 'SG' | nba$position == 'PG'])
#What is the median salary of Power Forwards (PF), 30 years or older, weighing 240 pounds or more?
median(nba$salary[nba$position == 'PG' & nba$age >= 30 & nba$weight >= 240])
#Create a data frame gsw with the player name, position, height, weight, and age of Golden State Warriors (GSW). Display this data frame.
gsw <- dat[nba$team == "GSW", c('player', 'position', 'height', 'weight', 'age')]
dat %>% filter(team == "GSW") %>% select_("player", "position", "height", "weight", "age")
plot(nba$efficiency, nba$salary)
plot(nba$efficiency, nba$salary)
plot(nba$efficiency, nba$salary)
install.packages(c("dplyr", "ggplot2"))
install.packages(c("dplyr", "ggplot2"))
install.packages(c("dplyr", "ggplot2"))
install.packages(c("dplyr", "ggplot2"))
knitr::opts_chunk$set(echo = TRUE, fig.path = '../images/')
knitr::opts_chunk$set(echo = TRUE, fig.path = '../images/')
gsw <- filter(dat, team == 'GSW')
gsw <- select(gsw, player, height, weight)
data <- /Users/Adam/Desktop/Stat135_F17/hw5/data.scores.txt
# Export the output of str() on the data frame with all the players. sink() the output, using a relative path,
# to a text file data-structure.txt, in the output/ folder.
sink(file = '../output/data-structure.txt')
help(png)
install.packages(magrittr)
install.packages("magrittr")
install.packages("magrittr")
install.packages("magrittr")
install.packages("magrittr")
install.packages("magrittr")
install.packages("magrittr")
Youngeunui-MacBook-Pro:data youngeunkim$
library('magrittr')
#display the player names of Lakers 'LAL'.
dat %>% filter(team == "LAL") %>% select(player)
# display the name and salary of GSW point guards 'PG'
dat %>% filter(team == "GSW" & position == "PG") %>% select(player, salary)
# display the name and salary of GSW point guards 'PG'
dat %>% filter(team == "GSW" & position == "PG") %>% select(player, salary)
dat %>%
group_by(team) %>%
select(team, height, weight) %>%
summarise(
avg_height = mean(height, na.rm = TRUE),
avg_weight = mean(weight, na.rm = TRUE)) %>%
arrange(avg_height)
dat
# using %>%
dat %>%
groupby(team) %>%
select(team, height, weight) %>%
summarise(
avg_height = mean(height, na.rm = TRUE),
avg_weight = mean(weight, na.rm = TRUE)) %>%
arrange(avg_height)
# using %>%
dat %>%
#group_by(team) %>%
select(team, height, weight) %>%
summarise(
avg_height = mean(height, na.rm = TRUE),
avg_weight = mean(weight, na.rm = TRUE)) %>%
arrange(avg_height)
dat %>%
#group_by(team) %>%
select(team, height, weight) %>%
summarise(
avg_height = mean(height, na.rm = TRUE),
avg_weight = mean(weight, na.rm = TRUE)) %>%
arrange(avg_height)
dat %>%
#group_by(team) %>%
select(team, height, weight) %>%
summarise(
avg_height = mean(height, na.rm = TRUE),
avg_weight = mean(weight, na.rm = TRUE)) %>%
arrange(avg_height)
# using %>%
dat %>%
group_by(team) %>%
select(team, height, weight) %>%
summarise(
avg_height = mean(height, na.rm = TRUE),
avg_weight = mean(weight, na.rm = TRUE)) %>%
arrange(avg_height)
dat %>% filter(team == "LAL") %>% select(player)
dat %>% filter(team == "LAL") %>% select(player)
dat %>% filter(team == "LAL") %>% select(player)
dat %>% filter(team == "LAL") %>% select(player)
dat %>% filter(team == "LAL") %>% select(player)
dat %>% filter(team == "LAL") %>% select(player)
dat %>% filter(team == "LAL") %>% select(player)
dat %>% filter(team == "LAL") %>% select(player)
dat %>% filter(team == "LAL") %>% select(player)
dat %>% filter(team == "LAL") %>% select(player)
dat %>% group_by(team)
library('magrittr')
library(readr)    # importing data
library(dplyr)    # data wrangling
library(ggplot2)  # graphics
dat %>%
filter(position == "PF" & experience <= 10 & experience >= 5) %>%
summarise(
avg_age = mean(age),
sd_age = sd(age)
)
dat %>%
group_by(team) %>%
select(team, points3) %>%
summarise(avg_pts3 = mean(points3)) %>%
arrange(avg_pts3) %>%
slice(1:5)
gsw_mpg <- dat %>%
filter(team == 'GSW') %>%
mutate(min_per_game = minutes / games) %>%
select(player, experience, min_per_game) %>%
arrange(desc(min_per_game))
dat %>% filter(experience > 10 & salary <= 1000000) %>% select(player, age, team)
setwd("~/Desktop/stat133-hws-fall18/workout1/report")
dat <- read.csv("../data/nba2018.csv")
dat <- read.csv("../data/nba2018.csv")
nrow(dat)
str(dat)
View(dat)
View(dat)
View(dat)
is.na(dat)
View(dat)
View(dat)
str(dat)
View(dat)
dat$experience[dat$experience == "R"] <- 0
dat$experience[dat$experience == "R"] <- '0'
dat$experience[dat$experience == "R"] <- "0"
library(dplyr)
dat$experience[dat$experience == "R"] <- "0"
View(dat)
getwd()
dat <- read.csv("../data/nba2018.csv")
dat$experience[dat$experience == "R"] <- "0"
dat <- read.csv("../data/nba2018.csv")
dat$experience[dat$experience == "R"] <- "0"
View(dat)
dat$experience <- as.integer(dat$experience)
dat$experience[dat$experience == "R"] <- "0"
dat <- read.csv("../data/nba2018.csv")
dat$experience <- as.integer(dat$experience)
dat$experience[dat$experience == "R"] <- "0"
View(dat)
dat <- read.csv("../data/nba2018.csv", stringsAsFactors = FALSE)
str(dat)
library(dplyr)
dat <- read.csv("../data/nba2018.csv", stringsAsFactors = FALSE)
str(dat)
dat$experience[dat$experience == "R"] <- "0"
View(dat)
str(dat)
dat$experience <- as.integer(dat$experience)
str(dat)
dat$salary <- dat$salary/1000000
View(dat)
# position should be a factor with 5 levels: 'C', 'PF', 'PG', 'SF', 'SG'. Relabel
# these factors using more descriptive names (see below):
dat$position <- factor(dat$position, levels = c('C', 'PF','PG', 'SF', 'SG'), labels = c('center', 'power_fwd', 'point_guard', 'small_fwd', 'shoot_guard'))
View(dat)
str(dat)
View(dat)
#Adding new variables
dat1 <- mutate(dat,
missed_fg = field_goals-atts - field_goals)
#Adding new variables
dat1 <- mutate(dat,
missed_fg = field_goals_atts - field_goals)
View(dat1)
library(dplyr)
dat <- read.csv("../data/nba2018.csv", stringsAsFactors = FALSE)
# experience should be of type character because of the presence of the R values that
# indicate rookie players. Replace all the occurrences of "R" with 0, and then convert
# the entire column into integers.
dat$experience[dat$experience == "R"] <- "0"
dat$experience <- as.integer(dat$experience)
str(dat)
# salary is originally measured in dollars. Transform salary so that you have salaries
# in millions: e.g. 1000000 should be converted to 1
dat$salary <- dat$salary/1000000
# position should be a factor with 5 levels: 'C', 'PF', 'PG', 'SF', 'SG'. Relabel
# these factors using more descriptive names (see below):
dat$position <- factor(dat$position, levels = c('C', 'PF','PG', 'SF', 'SG'), labels = c('center', 'power_fwd', 'point_guard', 'small_fwd', 'shoot_guard'))
#Adding new variables
dat <- mutate(dat,
missed_fg = field_goals_atts - field_goals,
missed_ft = points1_atts - points1,
rebounds = off_rebounds + def_rebounds,
efficiency = (points + rebounds + assists + steals + blocks - missed_fg - missed_ft - turnovers) / games)
#sink txt file in output
sink(file = '../output/efficiency-summary.txt')
summary(dat$efficiency)
View(dat)
group_by(dat, team)
dat1 <- summarise(
group_by(dat, team),
salary = sum(salary)
)
View(dat1)
rm(ls())
rm(ls(dat1))
ls(rm())
library(dplyr)
dat <- read.csv("../data/nba2018.csv", stringsAsFactors = FALSE)
# experience should be of type character because of the presence of the R values that
# indicate rookie players. Replace all the occurrences of "R" with 0, and then convert
# the entire column into integers.
dat$experience[dat$experience == "R"] <- "0"
dat$experience <- as.integer(dat$experience)
str(dat)
# salary is originally measured in dollars. Transform salary so that you have salaries
# in millions: e.g. 1000000 should be converted to 1
dat$salary <- dat$salary/1000000
# position should be a factor with 5 levels: 'C', 'PF', 'PG', 'SF', 'SG'. Relabel
# these factors using more descriptive names (see below):
dat$position <- factor(dat$position, levels = c('C', 'PF','PG', 'SF', 'SG'), labels = c('center', 'power_fwd', 'point_guard', 'small_fwd', 'shoot_guard'))
#Adding new variables
dat <- mutate(dat,
missed_fg = field_goals_atts - field_goals,
missed_ft = points1_atts - points1,
rebounds = off_rebounds + def_rebounds,
efficiency = (points + rebounds + assists + steals + blocks - missed_fg - missed_ft - turnovers) / games)
#sink txt file in output
sink(file = '../output/efficiency-summary.txt')
summary(dat$efficiency)
teams <- summarise(
group_by(dat, team),
experience = round(sum(experience), 2),
salary = sum(salary),
points3 = sum(points3),
points2 = sum(points2),
points1 = sum(points1),
points = sum(points),
off_rebounds = sum(off_rebounds),
def_rebounds = sum(def_rebounds),
assists = sum(assists),
steals = sum(steals),
blocks = sum(blocks),
turnovers = sum(turnovers),
fouls = sum(fouls),
efficiency = sum(efficiency)
)
View(teams)
teams <- summarise(
group_by(dat, team),
experience = round(sum(experience), 2),
salary = round(sum(salary), 2),
points3 = sum(points3),
points2 = sum(points2),
points1 = sum(points1),
points = sum(points),
off_rebounds = sum(off_rebounds),
def_rebounds = sum(def_rebounds),
assists = sum(assists),
steals = sum(steals),
blocks = sum(blocks),
turnovers = sum(turnovers),
fouls = sum(fouls),
efficiency = sum(efficiency)
)
View(teams)
sink(file = '../output/teams-summary.txt')
summary(teams$efficiency)
#create new csv file in data
write.csv(teams, "../data/nba2018-teams.csv", row.names = FALSE)
teams <- read.csv("../data/nba2018-teams.csv")
```{r}
ggplot(teams, aes(x=reorder(team, salary), y=salary)) + geom_bar(stat='identity') + coord_flip() + labs(y = "Salary(in millions)", x = "Team", title = "NBA Teams ranked by Total Salary") + geom_hline(aes(yintercept = mean(salary)), colour = "red", size = 1.5)
```{r}
ggplot(teams, aes(x=reorder(team, points), y=points)) + geom_bar(stat='identity') + coord_flip() + labs(y = "Total Points", x="Team", title = "NBA Teams ranked by Total Points") + geom_hline(aes(yintercept =  mean(points)), colour = "red", size = 1.5)
ggplot(teams, aes(x=reorder(team, efficiency), y=efficiency)) + geom_bar(stat='identity') + coord_flip() + labs(y = "Total Efficiency", x="Team", title = "NBA Teams ranked by Total Efficiency") + geom_hline(aes(yintercept =  mean(efficiency)), colour = "red", size = 1.5)
ggplot(teams, aes(x=reorder(team, experience), y=experience)) + geom_bar(stat='identity') + coord_flip() + labs(y = "Total Experience", x="Team", title = "NBA Teams ranked by Total Experience") + geom_hline(aes(yintercept =  mean(experience)), colour = "red", size = 1.5)
# I wanted to see if there are more veteran player who have more game experience have high possibility to win the match
